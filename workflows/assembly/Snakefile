'''
Author: Phillip Brooks 
Affiliation: UC Davis Lab for Data Intensive Biology
Aim: A Snakemake workflow to assemble quality trimmed reads using SPAdes and MEGAHIT 
Date: Wed Jan 17 2018
Run: snakemake --use-conda --use-singularity 
Latest modification:
'''
##--------------------------------------------------------------------------------------##
## Variables declaration                          
## Declaring some variables
## (SAMPLES, ASSEMBLER, qual)
##--------------------------------------------------------------------------------------##

SAMPLES = ['SRR606249', 'SRR606249_subset10', 'SRR606249_subset25', 'SRR606249_subset50']
ASSEMBLER = ['megahit', 'spades']

rule all:    
    input:
        expand('outputs/assembly/{assembler}/{sample}_trim{qual}_{assembler}/{sample}_trim{qual}_{assembler}.contigs.fa',
               sample=SAMPLES,
               qual=['2','30'],
               assembler=ASSEMBLER,
               ),
        expand('outputs/assembly/stats/{assembler}/{sample}_trim{qual}_{assembler}_multiqc/report.html',
               sample=SAMPLES,
               qual=['2','30'],
               assembler=ASSEMBLER,
               ),

rule assembly_metaSPAdes:
    input:
        fwd='../read_filtering/outputs/trim/{sample}_trim{qual}_1.fq.gz',
        rev='../read_filtering/outputs/trim/{sample}_trim{qual}_2.fq.gz',
    output:
        'outputs/assembly/spades/{sample}_trim{qual}_spades/{sample}_trim{qual}_spades.contigs.fa' 
    message: 
         '--- Assembling quality trimmed data with SPAdes'
    singularity: 
         'docker://quay.io/biocontainers/spades:3.11.1--py27_zlib1.2.8_0'
    log: 
         'outputs/assembly/spades/{sample}_trim{qual}_spades.log'
    threads: 32 
    benchmark:
        'benchmarks/{sample}_trim{qual}.spades.benchmark.txt'
    params:
        sample="{sample}",
        qual="{qual}"
    shell:
        '''
        metaspades.py -t {threads} \
            -m 240 \
            -1 {input.fwd} \
            -2 {input.rev} \
            -o `dirname {output}`
        mv `dirname {output}`/contigs.fasta {output}
        '''

rule assembly_MEGAHIT:
    input:
        fwd='../read_filtering/outputs/trim/{sample}_trim{qual}_1.fq.gz',
        rev='../read_filtering/outputs/trim/{sample}_trim{qual}_2.fq.gz',
    output:
        'outputs/assembly/megahit/{sample}_trim{qual}_megahit/{sample}_trim{qual}_megahit.contigs.fa'
    message: 
        '''--- Assembling quality trimmed reads with SPAdes'''
    singularity: 
        'docker://quay.io/biocontainers/megahit:1.1.2--py35_0'
    threads: 8
    benchmark: 
        'benchmarks/{sample}_trim{qual}.megahit.benchmark.txt'
    params: 
        sample="{sample}", 
        qual="{qual}" 
    shell:
        '''
        rm -rf `dirname {output}`
        megahit -t {threads} \
	    --memory 0.20 \
            -1 {input.fwd} \
            -2 {input.rev} \
	    --out-prefix={params.sample}_trim{params.qual}_megahit \
	    -o `dirname {output}`
        mv `dirname {output}`/{params.sample}_trim{params.qual}_megahit.contigs.fa {output} 
        '''

rule assembly_statistics_quast:
    input:
        'outputs/assembly/{assembler}/{sample}_trim{qual}_{assembler}/{sample}_trim{qual}_{assembler}.contigs.fa'
    output:
        'outputs/assembly/stats/{sample}_trim{qual}_{assembler}_quast/report.html',
    message: 
        '--- Calculating assembly statistics with quast'
    singularity: 
        'docker://quay.io/biocontainers/quast:4.5--boost1.61_1'
    log: 
        'outputs/assembly/stats/{sample}_trim{qual}_{assembler}.log',
    shell:
        'quast.py {input} -o {output}'

rule compile_assembly_stats_with_multiqc:
    input: 
        'outputs/assembly/stats/{sample}_trim{qual}_{assembler}_quast/report.html',
    output: 
        'outputs/assembly/stats/{assembler}/{sample}_trim{qual}_{assembler}_multiqc/report.html'  
    message: 
        '--- Compiling assembly statistics with multiqc'
    singularity: 
        'docker://quay.io/biocontainers/multiqc:1.4--py35_0'
    log: 
        'outputs/assembly/stats/{sample}_trim{qual}_{assembler}_multiqc.log',
    shell:
        'multiqc {input}' 

